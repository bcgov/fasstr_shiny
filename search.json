[{"path":"https://bcgov.github.io/fasstrshiny/CODE_DESIGN.html","id":null,"dir":"","previous_headings":"","what":"Code Design","title":"Code Design","text":"document records general code-design related decisions effort simplify future development. Much design fasstrshiny related design fasstr, series functions following similar naming conventions similar arguments. sections fasstrshiny related families functions within fasstr.","code":""},{"path":"https://bcgov.github.io/fasstrshiny/CODE_DESIGN.html","id":"organization","dir":"","previous_headings":"","what":"Organization","title":"Code Design","text":"panel app corresponding module functions file named mod_XXX.R. Interactively built UI elements top server functions. Anything pertaining modifying UI (toggles, updates, bookmarking) also section. Non-interactively built UI elements corresponding section ui function. Functions building commonly used inputs helper_ui_inputs.R script. functions can found helper_XXX.R files. fasster_shiny() function combines modules single app. Note section needs created menu, UI tabsets server section.","code":""},{"path":"https://bcgov.github.io/fasstrshiny/CODE_DESIGN.html","id":"namespace","dir":"","previous_headings":"","what":"Namespace","title":"Code Design","text":"modules create ids, need use NS() function ensure module ids unique. UI functions, use ns <- NS(id) top function. can use ns(\"my_input\") throughout. However, server functions, need use NS(id, \"my_input\") directly. functions create UI inputs, NS(id, ...) inside function, UI (Server) function pass id: select_rolling(id).","code":""},{"path":"https://bcgov.github.io/fasstrshiny/CODE_DESIGN.html","id":"inputs","dir":"","previous_headings":"","what":"Inputs","title":"Code Design","text":"Many inputs among sections fasstrshiny related arguments fasstr common among function families. ensure consistency, functions (select_XXXX()) used create inputs section. functions create separate instances inputs, unique ids, consistent. example, select_rolling(id) creates inputs ID_roll_days (numeric input) ID_rolling_align (select input). Interactively built inputs need created server functions “UI elements” can referenced ui uiOutput().","code":""},{"path":"https://bcgov.github.io/fasstrshiny/CODE_DESIGN.html","id":"creating-fasstr-functions","dir":"","previous_headings":"","what":"Creating fasstr functions","title":"Code Design","text":"fasstrshiny includes functions assembling fasstr functions based user input effort minimize need massive /else chains create code record share user (“R Code” tabs). One main ideas fasstrshiny share code used create output user. ensure output always consistent code used app, main fasstr functions assembled text object evaluated. text version can used R Code panels, evaluated version used create shiny app outputs. example, create_fun() takes name fasstr function, name dataset, shiny input object, data settings. matches inputs module parameters fasstr function, omits default values, creates text version fasstr function arguments. Example hydrograph figure: Example text output: can saved sharing user R Code panel, can parsed evaluated eval_check(t), function evaluates text code checks errors. Adding new arguments New arguments can added one two ways. argument used standard way, ’s name/id can added parameters data frame created data-raw/parameters.R use function can added workflow combine_parameters() function. long input id called param, id parameter shiny app, automatically used create_fun(), unless added params_ignore list. Alternatively argument used non-standard way, can added extra argument. ’ll also need add params_ignore two arguments final function. example, Hydrographs table, use percentiles several inputs (previously combined perc example), override default usage percentiles argument.","code":"data_flow <- data_raw()  g <- switch(input$type,             \"Daily\" = \"plot_daily_stats\",             \"Long-term Monthly\" = \"plot_longterm_monthly_stats\",             \"Long-term Daily\" = \"plot_longterm_daily_stats\") %>%   create_fun(data_name = \"data_flow\", input, input_data = data_settings(),              extra = dplyr::if_else(                input$add_year != \"\",                glue::glue(\"add_year = {input$add_year}\"),                \"\")) plot_daily_stats(data_flow,   values = \"Value\",   start_year = 1972,   end_year = 2019,   ignore_missing = TRUE,   add_year = 2013 ) t <- switch(input$hydro_type,             \"Long-term Daily\" = \"calc_longterm_daily_stats\",             \"Long-term Monthly\" = \"calc_longterm_monthly_stats\",             \"Daily\" = \"calc_daily_stats\") %>%   create_fun(     \"data_flow\", id = \"hydro\", input,     # Because input$hydro_percentiles exists, but we don't want to use it     params_ignore = \"percentiles\",     extra = glue(\"percentiles = c({glue_collapse(perc, sep = ', ')})\"))"},{"path":"https://bcgov.github.io/fasstrshiny/CODE_DESIGN.html","id":"datatables","dir":"","previous_headings":"","what":"Datatables","title":"Code Design","text":"scroller extension, must use scrollY attribute set table height (can’t use pageLength)","code":""},{"path":"https://bcgov.github.io/fasstrshiny/CODE_DESIGN.html","id":"missing-vs-allowed-missing","dir":"","previous_headings":"","what":"Missing vs. Allowed missing","title":"Code Design","text":"allowed_missing exists, use (overrides ignore_missing anyway)","code":""},{"path":"https://bcgov.github.io/fasstrshiny/CODE_DESIGN.html","id":"ggiraph","dir":"","previous_headings":"","what":"ggiraph","title":"Code Design","text":"Always use girafe, girafeOutput renderGirafe (ggiraph variants) Always use girafe(ggobj = PLOT) (ggobj important argument ) using vline tooltip (create_vline_interactive()) ’ll need adjust opts_hover() option girafe output make opacity 1.","code":""},{"path":"https://bcgov.github.io/fasstrshiny/CODE_DESIGN.html","id":"ids","dir":"","previous_headings":"","what":"IDs","title":"Code Design","text":"See internal dataset, parameters. created data-raw/parameters.R includes parameter ids, tooltips correspond fasstr arguments.","code":""},{"path":"https://bcgov.github.io/fasstrshiny/CODE_DESIGN.html","id":"spinners","dir":"","previous_headings":"","what":"Spinners","title":"Code Design","text":"Spinners created shinycssloaders package. global options set global.R. Every output requires progress spinner needs wrapped withSpinner() ui.R.","code":""},{"path":"https://bcgov.github.io/fasstrshiny/CODE_DESIGN.html","id":"troubleshooting","dir":"","previous_headings":"","what":"Troubleshooting","title":"Code Design","text":"Check make sure id isn’t duplicated","code":""},{"path":"https://bcgov.github.io/fasstrshiny/CODE_DESIGN.html","id":"adding-a-new-section","dir":"","previous_headings":"","what":"Adding a new section","title":"Code Design","text":"Create new mod_XXX.R file UI server functions add ui_XXX() function UI function, add reference sidebar function, add name (XXX) mods list data-raw/parameters.R, re-run file Add inputs values set data_settings() (see bottom mod_data_load.R) data_settings() values automatically used function. (.e. discharge use set value different flow type column like yield volume, isn’t always appropriate), add parameter argument params_ignore. parameters list data-raw/parameters.R combine_parameters.R function helper_create_fun.R New arguments aren’t standard (.e. percentiles mod_hydro.R) can added via extra argument new inputs created dynamically, ensure saved bookmarking. Add new types inputs restore_inputs() helper_shiny.R (see mod_hydro.R example). compute button required, ensure bookmarked (see mod_annual_trends.R example) Add tests test_mod.R, make sure every input gets starting value","code":""},{"path":"https://bcgov.github.io/fasstrshiny/CODE_DESIGN.html","id":"tips","dir":"","previous_headings":"","what":"Tips","title":"Code Design","text":"Ctrl-click function jump code function created. ’s part package, ’ll open observer information function well package ’s browser() code automatically pause code/app let use terminal. Great testing shiny apps. https://mastering-shiny.org/","code":""},{"path":[]},{"path":"https://bcgov.github.io/fasstrshiny/CODE_DESIGN.html","id":"interactive-plots","dir":"","previous_headings":"Future considerations","what":"Interactive Plots","title":"Code Design","text":"Right now use static plots created fasstr add interactivity plots either ggiraph (adding/replacing interactive geoms) plotly (ggplotly). future, interactivity added fasstr plots, however, risk making necessary update fasstr app tweak something fasstrshiny. also require dependencies fasstr.","code":""},{"path":"https://bcgov.github.io/fasstrshiny/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, interest fostering open welcoming community, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality. Examples unacceptable behavior participants include: use sexualized language imagery Personal attacks Trolling insulting/derogatory comments Public private harassment Publishing ’s private information, physical electronic addresses, without explicit permission unethical unprofessional conduct Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful. adopting Code Conduct, project maintainers commit fairly consistently applying principles every aspect managing project. Project maintainers follow enforce Code Conduct may permanently removed project team. Code Conduct applies within project spaces public spaces individual representing project community. Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project maintainer jon.goetz@gov.bc.ca. complaints reviewed investigated result response deemed necessary appropriate circumstances. Maintainers obligated maintain confidentiality regard reporter incident. Code Conduct adapted Contributor Covenant, version 1.3.0, available http://contributor-covenant.org/version/1/3/0/ project created using bcgovr package.","code":""},{"path":"https://bcgov.github.io/fasstrshiny/CONTRIBUTING.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to contribute","title":"NA","text":"Government employees, public members private sector encouraged contribute repository forking submitting pull request. (new GitHub, might start basic tutorial check detailed guide pull requests.) Pull requests evaluated repository guardians schedule deemed beneficial committed master. contributors retain original copyright stuff, contributing project, grant world-wide, royalty-free, perpetual, irrevocable, non-exclusive, transferable license users terms license project distributed. project created using bcgovr package.","code":""},{"path":"https://bcgov.github.io/fasstrshiny/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Steffi LaZerte. Author. Jon Goetz. Author, maintainer.","code":""},{"path":"https://bcgov.github.io/fasstrshiny/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"LaZerte S, Goetz J (2022). fasstrshiny: Shiny UI fasstr. R package version 0.0.0.9000, https://bcgov.github.io/fasstrshiny.","code":"@Manual{,   title = {fasstrshiny: Shiny UI for fasstr},   author = {Steffi LaZerte and Jon Goetz},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://bcgov.github.io/fasstrshiny}, }"},{"path":"https://bcgov.github.io/fasstrshiny/index.html","id":"fasstr-shiny-app","dir":"","previous_headings":"","what":"Shiny UI for fasstr","title":"Shiny UI for fasstr","text":"Shiny app analyze, summarize, visualize daily streamflow data 💧. app takes advantage bcgov’s {fasstr} {tidyhydat} packages allow interactive way view customize statistics, tables, plots created {fasstr}’s streamflow analysis functions. information {fasstr} functions can found GitHub Page GitHub repository. Also see Excel version, FASSTX, GitHub.","code":""},{"path":"https://bcgov.github.io/fasstrshiny/index.html","id":"working-with-fasstrshiny","dir":"","previous_headings":"","what":"Working with {fasstrshiny}","title":"Shiny UI for fasstr","text":"cover setup fasstrshiny local computer well start using code output fasstrshiny","code":""},{"path":"https://bcgov.github.io/fasstrshiny/index.html","id":"using-fasstrshiny","dir":"","previous_headings":"","what":"Using fasstrshiny","title":"Shiny UI for fasstr","text":"several ways use fasstrshiny","code":""},{"path":"https://bcgov.github.io/fasstrshiny/index.html","id":"1-online-httpsbcgov-envshinyappsiofasstrshiny","dir":"","previous_headings":"Using fasstrshiny","what":"1. Online https://bcgov-env.shinyapps.io/fasstrshiny/","title":"Shiny UI for fasstr","text":"Pros need install R fasstrshiny! Cons Slower Bookmarking uses urls can long Won’t learning new R :(","code":""},{"path":"https://bcgov.github.io/fasstrshiny/index.html","id":"2-locally","dir":"","previous_headings":"Using fasstrshiny","what":"2. Locally","title":"Shiny UI for fasstr","text":"install, R console run following (needs done ) use HYDAT data app, Environment Climate Change Canada’s HYDAT database must downloaded (needs done needed update): Shiny App run, R console, run following (needs done everytime): Pros Faster Bookmarking uses local files urls simpler ’re working R already, ’s easier start using fasstr code output Shiny App learn ! Cons need install R, RStudio (optional recommended), fasstrshiny package Working locally means system setup may occasionally create unique problems tricky trouble shoot (doubt, update packages: remotes::update_packages())","code":"install.packages(\"remotes\") remotes::install_github(\"bcgov/fasstrshiny\") tidyhydat::download_hydat() library(fasstrshiny) # Loads the package fasstr_shiny()       # Launches the Shiny App"},{"path":"https://bcgov.github.io/fasstrshiny/index.html","id":"using-code-output-from-shiny-app","dir":"","previous_headings":"","what":"Using code output from Shiny App","title":"Shiny UI for fasstr","text":"Every page app “R Code” tab. tab shows R code used create plots figures particular page. Playing around code great way become familiar R fasstr. First, ’re brand new R, consider running primer getting started R RStudio. ’re comfortable working basic R scripts, ’re ready take stab playing fasstr code!","code":""},{"path":"https://bcgov.github.io/fasstrshiny/index.html","id":"loading-packages","dir":"","previous_headings":"Using code output from Shiny App","what":"Loading packages","title":"Shiny UI for fasstr","text":"First, ’ll need make sure right packages loaded. ’ve already installed fasstrshiny package () using fasstrshiny locally, ’re good go. Otherwise, install fasstr HYDAT database using instructions .","code":""},{"path":"https://bcgov.github.io/fasstrshiny/index.html","id":"running-fasstr-code","dir":"","previous_headings":"Using code output from Shiny App","what":"Running fasstr code","title":"Shiny UI for fasstr","text":"series code starts block loading data (data_flow = ...), either HYDAT data base local file (see Things remember, loading local data). run code locally, copy code, paste script RStudio (similar R IDE). one important step now: Add library(fasstr) top script. needs done per script, ’s best put code top script since needs loaded thing else. Now can run script! produce figures /output see fasstrshiny app. Note complex figures (e.g. hydrographs added dates added MAD values) modified fasstr figure produced code won’t reproduce figures exactly. Saving script great way keep track analyses future use. can also share colleagues.","code":""},{"path":[]},{"path":"https://bcgov.github.io/fasstrshiny/index.html","id":"updating-code","dir":"","previous_headings":"Using code output from Shiny App > Things to remember","what":"Updating code","title":"Shiny UI for fasstr","text":"R code panel generally shows last figure produced. ’re tab change setting, won’t always updated code. safe, always look figure/table want reproduce first, grab code. also means don’t look tab, code won’t appear R Code tab.","code":""},{"path":"https://bcgov.github.io/fasstrshiny/index.html","id":"local-data","dir":"","previous_headings":"Using code output from Shiny App > Things to remember","what":"Local data","title":"Shiny UI for fasstr","text":"load local data set, R code data block show name file. means unless file working directory loading code error. better understanding working directories, see Introduction R - 1.7 Working directories. general, try work RStudio projects, keep scripts data together. data working directory, can run code , otherwise ’ll need modify file name include location. example, “test.csv” becomes “data/test.csv” test.csv data folder working directory.","code":""},{"path":"https://bcgov.github.io/fasstrshiny/index.html","id":"project-status","dir":"","previous_headings":"Using code output from Shiny App","what":"Project Status","title":"Shiny UI for fasstr","text":"project development. many features place, testing still proceeding.","code":""},{"path":"https://bcgov.github.io/fasstrshiny/index.html","id":"getting-help-or-reporting-an-issue","dir":"","previous_headings":"Using code output from Shiny App","what":"Getting Help or Reporting an Issue","title":"Shiny UI for fasstr","text":"report bugs/issues/feature requests, please file issue.","code":""},{"path":"https://bcgov.github.io/fasstrshiny/index.html","id":"how-to-contribute","dir":"","previous_headings":"Using code output from Shiny App","what":"How to Contribute","title":"Shiny UI for fasstr","text":"like contribute, please see CONTRIBUTING guidelines. Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://bcgov.github.io/fasstrshiny/index.html","id":"license","dir":"","previous_headings":"Using code output from Shiny App","what":"License","title":"Shiny UI for fasstr","text":"repository maintained Water Protection Sustainability Branch British Columbia Ministry Environment Climate Change Strategy.","code":"Copyright 2021 Province of British Columbia  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://bcgov.github.io/fasstrshiny/reference/fasstr_shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch fasstr shiny app — fasstr_shiny","title":"Launch fasstr shiny app — fasstr_shiny","text":"Launch fasstr shiny app","code":""},{"path":"https://bcgov.github.io/fasstrshiny/reference/fasstr_shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch fasstr shiny app — fasstr_shiny","text":"","code":"fasstr_shiny()"},{"path":"https://bcgov.github.io/fasstrshiny/reference/fasstrshiny-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fasstrshiny — fasstrshiny-package","title":"fasstrshiny — fasstrshiny-package","text":"Package providing Shiny App user interface fasstr package.","code":""},{"path":"https://bcgov.github.io/fasstrshiny/reference/fasstrshiny-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fasstrshiny — fasstrshiny-package","text":"Get started fasstr_shiny()","code":""}]
